package com.crunchmail.extension;

import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import com.google.common.base.Strings;

import com.zimbra.common.service.ServiceException;
import com.zimbra.common.mailbox.ContactConstants;
import com.zimbra.common.soap.Element;
import com.zimbra.common.soap.MailConstants;
import com.zimbra.cs.service.util.ItemId;
import com.zimbra.cs.account.Account;
import com.zimbra.cs.account.Provisioning;
import com.zimbra.cs.account.GalContact;
import com.zimbra.cs.mailbox.Mailbox;
import com.zimbra.cs.mailbox.Mailbox.FolderNode;
import com.zimbra.cs.mailbox.MailboxManager;
import com.zimbra.cs.mailbox.MailItem;
import com.zimbra.cs.mailbox.Folder;
import com.zimbra.cs.mailbox.Mountpoint;
import com.zimbra.cs.mailbox.Flag;
import com.zimbra.cs.mailbox.Contact;
import com.zimbra.cs.mailbox.ContactGroup;
import com.zimbra.cs.mailbox.ContactGroup.Member;
import com.zimbra.cs.mailbox.OperationContext;
import com.zimbra.cs.index.SortBy;

import com.crunchmail.extension.Logger;
import com.crunchmail.extension.UserSettings;

/**
 *
 */
public class ContactsTreeFetcher extends ContactsCrawler {

    HashMap<String, Object> addressBookTree;

    public ContactsFetcher(Mailbox mbox, Account account) throws ServiceException {
        this(mbox, account, false);
    }

    public ContactsFetcher(Mailbox mbox, Account account, boolean debug) throws ServiceException {
        addressBookTree = new HashMap<String, Object>();

        super(mbox, account, debug);
    }

    private HashMap<String, Object> getOrMakeTreeEntry(Folder f, Mailbox mbx, HashMap<String, Object> treeNode, String nodeName)throws ServiceException {
        // Make tree entry if necessary
        @SuppressWarnings("unchecked")
        HashMap<String, Object> entry = (HashMap<String, Object>) treeNode.get(nodeName);
        if (entry == null) {
            entry = new HashMap<String, Object>();

            HashMap<String, Object> attrs = new HashMap<String, Object>();
            attrs.put("isShare", mbx != mbox);
            attrs.put("color", f.getRgbColor().toString());
            entry.put("_attrs", attrs);

            entry.put("_subfolders", new HashMap<String, Object>());
            entry.put("contacts", new HashSet<HashMap<String, Object>>());
            entry.put("groups", new HashSet<HashMap<String, Object>>());

            treeNode.put(nodeName, entry);
        }

        return entry;
    }

    private handleContactObj(HashMap<String, Object> contact, Folder f, Mailbox mbx, HashMap<String, Object> treeNode, String nodeName) throws ServiceException {
        HashMap<String, Object> treeEntry = getOrMakeTreeEntry(f, mbx, treeNode, nodeName);
        HashSet<HashMap<String, Object>> contacts = treeEntry.get("contacts");
        contacts.add(contact);
    }

    private handleGroupObj(HashMap<String, Object> group, Folder f, Mailbox mbx, HashMap<String, Object> treeNode, String nodeName) throws ServiceException {
        HashMap<String, Object> treeEntry = getOrMakeTreeEntry(f, mbx, treeNode, nodeName);
        HashSet<HashMap<String, Object>> groups = treeEntry.get("groups");
        groups.add(group);
    }

    private handleRemoteObj(HashMap<String, String> remote, Folder f, Mailbox mbx, HashMap<String, Object> treeNode, String nodeName) throws ServiceException {
        remoteCollection.add(remote);
    }

    private void recurseTree(HashMap<String, Object> entry) throws ServiceException {
        // @SuppressWarnings("unchecked")
        // List<Integer> contacts_index = (List<Integer>) entry.get("contacts_index");
        // Set<HashMap<String, Object>> treeNodeContacts = new HashSet<HashMap<String, Object>>();
        // for (int index : contacts_index) {
        //     treeNodeContacts.add(contactsCollection.get(index));
        // }
        // entry.put("contacts", treeNodeContacts);
        // entry.remove("contacts_index");
        //
        // @SuppressWarnings("unchecked")
        // List<Integer> groups_index = (List<Integer>) entry.get("groups_index");
        // Set<HashMap<String, Object>> treeNodeGroups = new HashSet<HashMap<String, Object>>();
        // for (int index : groups_index) {
        //     treeNodeGroups.add(groupsCollection.get(index));
        // }
        // entry.put("groups", treeNodeGroups);
        // entry.remove("groups_index");

        @SuppressWarnings("unchecked")
        HashMap<String, Object> subfolders = (HashMap<String, Object>) entry.get("_subfolders");
        for (Map.Entry<String, Object> subfolder : subfolders.entrySet()) {
            @SuppressWarnings("unchecked")
            HashMap<String, Object> value = (HashMap<String, Object>) subfolder.getValue();
            recurseTree(value);
        }
    }

    public Map<String, Object> fetchTree() throws ServiceException {

        crawlContacts();

        logger.debug("Tree: " + addressBookTree);

        for (Iterator<Map.Entry<String, Object>> it = addressBookTree.entrySet().iterator(); it.hasNext();) {
            Map.Entry<String, Object> entry = it.next();
            logger.debug("------------------ loop: " + entry);
            @SuppressWarnings("unchecked")
            HashMap<String, Object> value = (HashMap<String, Object>) entry.getValue();
            if (value.get("requester") != null) {
                logger.debug("Value: " + value);
                it.remove();
            } else {
                recurseTree(value);
            }
        }
        // for (Map.Entry<String, Object> entry : addressBookTree.entrySet()) {
        //     @SuppressWarnings("unchecked")
        //     HashMap<String, Object> value = (HashMap<String, Object>) entry.getValue();
        //     recurseTree(value);
        // }

        logger.debug("-------------- after loop");

        return addressBookTree;
    }

}
