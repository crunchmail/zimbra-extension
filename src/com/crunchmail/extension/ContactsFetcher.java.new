package com.crunchmail.extension;

import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import com.google.common.base.Strings;

import com.zimbra.common.service.ServiceException;
import com.zimbra.common.mailbox.ContactConstants;
import com.zimbra.common.soap.Element;
import com.zimbra.common.soap.MailConstants;
import com.zimbra.cs.service.util.ItemId;
import com.zimbra.cs.account.Account;
import com.zimbra.cs.account.Provisioning;
import com.zimbra.cs.account.GalContact;
import com.zimbra.cs.mailbox.Mailbox;
import com.zimbra.cs.mailbox.Mailbox.FolderNode;
import com.zimbra.cs.mailbox.MailboxManager;
import com.zimbra.cs.mailbox.MailItem;
import com.zimbra.cs.mailbox.Folder;
import com.zimbra.cs.mailbox.Mountpoint;
import com.zimbra.cs.mailbox.Flag;
import com.zimbra.cs.mailbox.Contact;
import com.zimbra.cs.mailbox.ContactGroup;
import com.zimbra.cs.mailbox.ContactGroup.Member;
import com.zimbra.cs.mailbox.OperationContext;
import com.zimbra.cs.index.SortBy;

import com.crunchmail.extension.Logger;
import com.crunchmail.extension.UserSettings;

/**
 *
 */
public class ContactsFetcher extends ContactsCrawler {

    private List<HashMap<String, Object>> contactsCollection;
    private List<HashMap<String, Object>> groupsCollection;
    private List<HashMap<String, String>> remoteCollection;

    public ContactsFetcher(Mailbox mbox, Account account) throws ServiceException {
        this(mbox, account, false);
    }

    public ContactsFetcher(Mailbox mbox, Account account, boolean debug) throws ServiceException {
        contactsCollection = new ArrayList<HashMap<String, Object>>();
        groupsCollection = new ArrayList<HashMap<String, Object>>();
        remoteCollection = new ArrayList<HashMap<String, String>>();

        super(mbox, account, debug);
    }

    private handleContactObj(HashMap<String, Object> contact) throws ServiceException {
        contactsCollection.add(contactObj);
    }

    private handleGroupObj(HashMap<String, Object> group) throws ServiceException {
        groupsCollection.add(groupObj);
    }

    private handleRemoteObj(HashMap<String, String> remote) throws ServiceException {
        remoteCollection.add(remote);
    }

    public Map<String, List<HashMap<String, Object>>> fetch() throws ServiceException {
        HashMap<String, List<HashMap<String, Object>>> collection = new HashMap<String, List<HashMap<String, Object>>>();

        crawlContacts();

        collection.put("contacts", contactsCollection);
        collection.put("groups", groupsCollection);
        logger.debug("Remote collection:" + remoteCollection);
        return collection;
    }

}
